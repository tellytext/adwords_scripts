/********
* Remove Sitelinks
* This script will removes Campaign level Sitelink Ad Extensions that have an 
* End Date that has passed upon current time that the Script runs.
* This script does not run hourly and remove Sitelinks based on Ad Scheduling.
*
* Version: 1.03 
* Update: This version creates the date object and converts to a Unix Time Stamp.
* Date: 11/04/2017
* Updated to use Unix Time Stamp.
* Updated to include Callout Extensions 
* Author: Nicholas Potts
* On behalf of bet365.com.
*
********/

function main() {
  var now = new Date();
  var timeZone = AdWordsApp.currentAccount().getTimeZone();
  var nowStr = Utilities.formatDate(now, timeZone, 'MMMM dd, yyyy HH:mm:ss Z');
  var nowObj = new Date(nowStr);
  var nowUnix = (nowObj.getTime()/1000).toFixed().toString();
  
  var slarr = [];
  var arr = [];
  var coarr = [];
  var arr1 = []
  
  var campaignIterator = AdWordsApp.campaigns()
  //Enable to only run for active accounts
  //.withCondition("Status = ENABLED")
  .get();
  
  while (campaignIterator.hasNext()) {
    var campaign = campaignIterator.next();
    var campaignName = campaign.getName();
    var sitelinkIterator = campaign.extensions().sitelinks().get();
    while (sitelinkIterator.hasNext()) {
      var sitelink = sitelinkIterator.next();
      var sitelinkID = sitelink.getId();
      
      if (sitelink.getEndDate() !== null) {
        var SLScheduledEndDate = sitelink.getEndDate();
        var SLendDate = new Date(SLScheduledEndDate.year, parseInt(SLScheduledEndDate.month)-1, SLScheduledEndDate.day, '23', '59', '00');      
        SLendDate = new Date(Utilities.formatDate(SLendDate, timeZone, 'MMMM dd, yyyy HH:mm:ss Z'));
        var SLendDateUTCSeconds = (SLendDate.getTimezoneOffset()) * 60;
        var SLendDateMinusTimezone = (SLendDate.getTime() / 1000) - SLendDateUTCSeconds;
        var SLendDateUnix = SLendDateMinusTimezone.toFixed().toString();
        
        if(nowUnix > SLendDateUnix){
          campaign.removeSitelink(sitelink); 
          slarr = ["Sitelink ID:" + sitelinkID + " | Campaign:" + campaignName + " | Paused as End Date has passed:" + SLendDate];
          arr.push(slarr);      
        }
      }
    }
    
    var calloutIterator = campaign.extensions().callouts().get();
    while (calloutIterator.hasNext()) {
      var callout = calloutIterator.next();
      var calloutID = callout.getId();
      
      if (callout.getEndDate() !== null) {
        var COScheduledEndDate = callout.getEndDate();
        var COendDate = new Date(COScheduledEndDate.year, parseInt(COScheduledEndDate.month)-1, COScheduledEndDate.day, '23', '59', '00');      
        COendDate = new Date(Utilities.formatDate(COendDate, timeZone, 'MMMM dd, yyyy HH:mm:ss Z'));
        var COendDateUTCSeconds = (COendDate.getTimezoneOffset()) * 60;
        var COendDateMinusTimezone = (COendDate.getTime() / 1000) - COendDateUTCSeconds;
        var COendDateUnix = COendDateMinusTimezone.toFixed().toString();
        
        if(nowUnix > COendDateUnix){
          campaign.removeCallout(callout); 
          coarr = ["Callout ID:" + calloutID + " | Campaign:" + campaignName + " | Paused as End Date has passed:" + COendDate];
          arr1.push(coarr);
        }
      } 
    }
  }
  Logger.log(arr + " " + arr1);
}