/********
*
* Bid To KW Label Position
* Define CPC Limits
* Labelled Keywords
* Version: 1.02
* Date: 30/08/2017
* Author: Nicholas Potts
* On behalf of bet365.com.
*
********/
var maxBid = 8.20;
var minBid = 2.20;
var firstPageMaxBid = 3.20

var targetPositionTolerance = 0.2;
var bidIncreaseProportion = 0.4;
var bidDecreaseProportion = 0.2;

var useFirstPageBidsOnKeywordsWithNoImpressions = true

function main(){ 
  
  var labelIds = []; 
  
  var labelIterator = AdWordsApp.labels()
  .withCondition("KeywordsCount > 0")
  .withCondition("LabelName CONTAINS_IGNORE_CASE 'Position '")
  .get();
  
  while (labelIterator.hasNext()){ 
    var label = labelIterator.next();
    if(label.getName().substr(0, "position ".length).toLowerCase() == "position "){
      labelIds.push(label.getId()); 
    }
  }
  
  if(labelIds.length == 0){
    throw "No Position labels found"; 
    
  }
  
  Logger.log(labelIds.length.toFixed() + " position labels found."); 
  
  var keywordData = {}
  
  var ids = [];
  var uniqueIds = []; 
  
  var report = AdWordsApp.report(
    'SELECT Id, Criteria, AdGroupId, AdGroupName, CampaignName, Impressions, AveragePosition, CpcBid, FirstPageCpc, Labels, BiddingStrategyType ' + 
    'FROM KEYWORDS_PERFORMANCE_REPORT ' + 
    'WHERE Status = ENABLED AND AdGroupStatus = ENABLED AND CampaignStatus = ENABLED ' + 
    'AND LabelIds CONTAINS_ANY [' + labelIds.join(",") + '] ' +
    'DURING TODAY'); 
  
  var rows = report.rows();
  
  while(rows.hasNext()){
    var row = rows.next();
    
    if(row['BiddingStrategyType'] != "cpc"){ 
      Logger.log("Error keyword " + row['Criteria'] + " in campaign " + row['CampaignName'] +  " uses bidding strategy " + row['BiddingStrategyType'] + " to use bid to position please use manual cpc bidding");
    }
    
    var labels = JSON.parse(row['Labels'].toLowerCase());
    
    var targetPosition = "";
    
    for(var i=0; i<labels.length; i++){
      if(labels[i].substr(0,"position ".length) == "position "){
        var targetPosition = parseFloat(labels[i].replace( /^\D+/g, ''));
        break;
        /* Alternative method to get integer 
        var targetPosition = parseFloat(labels[i].substr("position ".length-1).replace(/,/g,"."),10);
        Logger.log(positionTarget);
        */
      }
    }
    if(targetPosition == ""){
      continue;
    }
    if(integerCheck(targetPosition) == -1){
      Logger.log("Invalid target position " + targetPosition + " from keyword " + row['Criteria'] + " in campaign " + row['CampaignName']); 
    }
    
    ids.push(parseFloat(row['Id'],10));
    //create unique identifier (kws not unique) 
    var uniqueId = row['AdGroupId'] + "~" + row['Id'];
    uniqueIds.push(uniqueId);
    
    
    //createobject
    keywordData[uniqueId] = {}
    keywordData[uniqueId]['Criteria'] = row['Criteria'];
    keywordData[uniqueId]['ThisHour'] = {};
    
    keywordData[uniqueId]['ThisHour']['Impressions'] = parseFloat(row['Impressions'].replace(/,/g,""),10);
    keywordData[uniqueId]['ThisHour']['AveragePosition'] = parseFloat(row['AveragePosition'].replace(/,/g,""),10);
    
    keywordData[uniqueId]['CpcBid'] = parseFloat(row['CpcBid'].replace(/,/g,""),10);
    keywordData[uniqueId]['FirstPageCpc'] = parseFloat(row['FirstPageCpc'].replace(/,/g,""),10);
    
    setPositionTargets(uniqueId, targetPosition);
    
    /* End of while */
  }
  
  Logger.log(ids.length.toFixed() + " keywords with position labels found.");
  //  Logger.log(ids);
  //  Logger.log(keywordData); 
  
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
  
  setBidChange();
  setMinMaxBids();
  
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
  
  findCurrentAveragePosition();
  
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
  
  var idBatches = [];
  var batchSize = 5000;
  for (var i=0; i<uniqueIds.length; i += batchSize) {
    idBatches.push(uniqueIds.slice(i,i+batchSize));
  }
  
  Logger.log("Updating keywords");
//  Logger.log(idBatches); 
  
  // Update each batch
  for (var i=0; i<idBatches.length; i++) {
    try {
      updateKeywords(idBatches[i]);
      Logger.log("Updated keywords.");
    } catch (e) {
      Logger.log("Error updating keywords: " + e);
      Logger.log("Retrying after one minute.");
      Utilities.sleep(60000);
      updateKeywords(idBatches[i]);
    }
  }
  
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
  
  function integerCheck(targetPosition){
    var num = parseFloat(targetPosition, 10); 
    if(!isNaN(num) && num >= 1){
      return num;
    }
    else{
      return -1
    }
  }
  
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
  
  function setPositionTargets(uniqueId, target){
    if(target !== -1){
      keywordData[uniqueId]['HigherPositionTarget'] = Math.max(target - targetPositionTolerance, 1);
      //      Logger.log(keywordData[uniqueId]['HigherPositionTarget'] = Math.max(target - targetPositionTolerance, 1));
      keywordData[uniqueId]['LowerPositionTarget'] = parseInt(target, 10) + targetPositionTolerance;
      //      Logger.log(keywordData[uniqueId]['LowerPositionTarget'] = parseInt(target, 10) + targetPositionTolerance);
    }
    else{
      keywordData[uniqueId]['HigherPositionTarget'] = -1;
      keywordData[uniqueId]['LowerPositionTarget'] = -1;
    }
  }
  
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
  
  function setBidChange(){
    for(var x in keywordData){
      keywordData[x]['BidIncrease'] = keywordData[x]['CpcBid'] * bidIncreaseProportion/2;
      //      Logger.log((keywordData[x]['CpcBid'] * bidIncreaseProportion/2).toFixed(2));
      keywordData[x]['BidDecrease'] = keywordData[x]['CpcBid'] * bidDecreaseProportion/2;
      //      Logger.log((keywordData[x]['CpcBid'] * bidDecreaseProportion/2).toFixed(2));
    }
  }
  
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
  
  function setMinMaxBids(){
    for(var x in keywordData){
      keywordData[x]['MinBid'] = minBid;
      keywordData[x]['MaxBid'] = maxBid;
      keywordData[x]['FirstPageMaxBid'] = firstPageMaxBid;
    }
  }
  
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
  
  function findCurrentAveragePosition(){
    for(var x in keywordData){
      if(keywordData[x].hasOwnProperty('LastHour')){
        keywordData[x]['CurrentAveragePosition'] = calculateAveragePosition(keywordData[x]);
      } else {
        keywordData[x]['CurrentAveragePosition'] = keywordData[x]['ThisHour']['AveragePosition'];
      }
    }
  }
  
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
  
  function calculateAveragePosition(keywordDataElement){
    var lastHourImpressions = keywordDataElement['LastHour']['Impressions'];
    var lastHourAveragePosition = keywordDataElement['LastHour']['AveragePosition'];
    
    var thisHourImpressions = keywordDataElement['ThisHour']['Impressions'];
    var thisHourAveragePosition = keywordDataElement['ThisHour']['AveragePosition'];
    
    if(thisHourImpressions == lastHourImpressions){
      return 0;
    }
    else{
      var currentPosition = (thisHourImpressions*thisHourAveragePosition-lastHourImpressions*lastHourAveragePosition)/(thisHourImpressions-lastHourImpressions);
      if (currentPosition < 1) {
        return 0;
      } else {
        return currentPosition;
      }
    }
  }
  
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
  
  function updateKeywords(idBatch) {
    var keywordIterator = AdWordsApp.keywords()
    .withIds(idBatch.map(function(str){return str.split("~");}))
    .get();
    while(keywordIterator.hasNext()){
      var keyword = keywordIterator.next();
      
      var uniqueId = keywordUniqueId(keyword);
      
      var newBid = bidChange(uniqueId);
      
      if(newBid !== -1){
        keyword.setMaxCpc(newBid);
      }  
    }
  }
  
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
  
  function keywordUniqueId(keyword){
    var id = keyword.getId();
    var idsIndex = ids.indexOf(id);
    if(idsIndex === ids.lastIndexOf(id)){
      return uniqueIds[idsIndex];
    }
    else{
      var adGroupId = keyword.getAdGroup().getId();
      return adGroupId + "~" + id;
    }
  }
  
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
  
  function bidChange(uniqueId){
    
    var newBid = -1;
    if(keywordData[uniqueId]['HigherPositionTarget'] === -1){
      return newBid;
    }
    
    var cpcBid = keywordData[uniqueId]['CpcBid'];
    var minBid = keywordData[uniqueId]['MinBid'];
    var maxBid = keywordData[uniqueId]['MaxBid'];
    
    if (isNaN(keywordData[uniqueId]['FirstPageCpc'])) {
      Logger.log("Warning: first page CPC estimate is not a number for keyword '" + keywordData[uniqueId]['Criteria'] + "'. This keyword will be skipped");
      return -1;
    }
    
    var firstPageBid = Math.min(keywordData[uniqueId]['FirstPageCpc'], keywordData[uniqueId]['FirstPageMaxBid'], maxBid);
    
    var currentPosition = keywordData[uniqueId]['CurrentAveragePosition'];
    var higherPositionTarget = keywordData[uniqueId]['HigherPositionTarget'];
    var lowerPositionTarget = keywordData[uniqueId]['LowerPositionTarget'];
    
    var bidIncrease = keywordData[uniqueId]['BidIncrease'];
    var bidDecrease = keywordData[uniqueId]['BidDecrease'];
    
    if((currentPosition > lowerPositionTarget) && (currentPosition !== 0)){
      var linearBidModel = Math.min(2*bidIncrease,(2*bidIncrease/lowerPositionTarget)*(currentPosition-lowerPositionTarget));
      var newBid = Math.min((cpcBid + linearBidModel), maxBid);
    }
    if((currentPosition < higherPositionTarget) && (currentPosition !== 0)) {
      var linearBidModel = Math.min(2*bidDecrease,((-4)*bidDecrease/higherPositionTarget)*(currentPosition-higherPositionTarget));
      var newBid = Math.max((cpcBid-linearBidModel),minBid);
      if (cpcBid > firstPageBid) {
        var newBid = Math.max(firstPageBid,newBid);
      }
    }
    if((currentPosition === 0) && useFirstPageBidsOnKeywordsWithNoImpressions && (cpcBid < firstPageBid)){
      var newBid = firstPageBid;
    }
    
    if (isNaN(newBid)) {
      Logger.log("Warning: new bid is not a number for keyword '" + keywordData[uniqueId]['Criteria'] + "'. This keyword will be skipped");
      return -1;
    }
    
    return newBid;
    
  }
  
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
  
  
  Logger.log("Foo Bar!"); 
  
}